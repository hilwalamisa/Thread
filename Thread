#include <iostream>
#include <thread>               //thread library
#include <mutex>                //mengatur penggunaan sebuah resource
#include <condition_variable>   //menentukan kondisi tertentu
#include <chrono>               //memastikan waktu dan tanggal

using namespace std;

mutex mu;                   //mutex berfungsi melindungi variabel/data tidak diakses bersamaan oleh banyak thread
condition_variable cond;    //deklarasi variabel yang akan dibawa ke void condition_variable cond;
int coun = 1;               //deklarasi variabel coun dan inisialisasi variabel dengan input 1 



void PrintOdd()         //fungsi untuk Print Odd Number
{
    for (; coun < 10;)  //perulangan sampai ke 10
    {
        unique_lock<mutex> locker(mu);                          //unique_lock sebuah objek yang mengelola object mutex dengan kepemilikan unik (mutex is locked)
        cond.wait(locker, []() { return (coun % 2 == 1); });    //block thread sampai mereturn hasil yang sesuai looping
        this_thread::sleep_for(chrono::seconds(1));             //memberikan delay sebanyak 1 detik 
        cout << "From Odd:    " << coun << endl;                //untuk outputan Odd Thread sesuai coun yang telah dilooping
        coun++;                                                 //terus bertambah ketika output memenuhi aturan looping
        locker.unlock();                                        //unlock the mutex 
        cond.notify_all();                                      //Unblock semua thread yang menunggu di kondisi ini
    }
}


void PrintEven()        //fungsi untuk Print Even Number
{
    for (; coun < 10;)
    {
        unique_lock<mutex> locker(mu);
        cond.wait(locker, []() { return (coun % 2 == 0); });
        this_thread::sleep_for(chrono::duration<float>(2.5));   //karena 2.5 bertipe data double maka menggunakan duration<double>
        cout << "From Even: " << coun << std::endl;             
        coun++;
        locker.unlock();
        cond.notify_all();
    }
}


int main()
{

    thread t1(PrintOdd);    //memanggil fungsi Odd
    thread t2(PrintEven);   //memanggil fungsi Even

    t1.join(); //method yang membuat menunggu thread untuk menyelesaikan eksekusi
    t2.join();
    return 0;
}
